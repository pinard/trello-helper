#+TITLE: trello-helper — Moving information between Trello and Emacs Org
#+OPTIONS: H:2

** Goal

This project aims [[http://orgmode.org/][Org (an Emacs mode)]] as a way for consulting or
searching among [[https://trello.com/][Trello cards]].  *trello-helper* is the name of the Python
program which, using the Trello API, fetches information from Trello.
As I have a lot of notes in Org format already, and an [[https://github.com/pinard/org-grep][efficient tool]]
to search them, it is convenient for me being able to search both Org
and Trello in one swoop.

See Antoine Dumont's nice [[http://adumont.fr/blog/org-trello-sync-your-org-file-to-trello/][org-trello]] project for a comprehensive,
mature, real-time, 2-way sync, Emacs only solution.

** Installation

Install file =trello-helper= as an executable script somewhere on your
usual program search path.  It assumes that *python*, as a program name,
triggers Python 2.x (I only tried with Python 2.7.5).  The program
depends on other Python modules: *py-trello*, *pyperclip* and a patched
version of *python-oauth2*.  Here is a recipe for these:

  #+BEGIN_SRC sh
    git clone https://github.com/tylerwilliams/python-oauth2
    (cd python-oauth2/ && python setup.py install)
    git clone https://github.com/gfxmonk/pyperclip
    (cd pyperclip && python setup.py install)
    git clone https://github.com/sarumont/py-trello
    (cd py-trello/ && python setup.py install)
  #+END_SRC

You might need to install other programs (like *xclip* for Linux); see
[[https://github.com/gfxmonk/pyperclip][pyperclip documentation]] for details.

OAuth2 credentials for your Trello board should be obtained and preset
within file =~/.trello/config.ini=, like this:

  #+BEGIN_EXAMPLE
    [trello]
    key = 0123456789abcdef0123456789abcdef
    token = 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
  #+END_EXAMPLE

replacing the hexadecimal values appropriately, of course.  Visit the
page about [[https://trello.com/1/appKey/generate][Developer API Keys]] to get the needed values.

The provided =trello-helper.el= file has the purpose of adding a bit of
comfort within Emacs, while visiting Org files produced by
*trello-helper*.  There are a few ways to activate it, for example by
adding its contents to your own =~/.emacs= file.  I prefer putting that
file somewhere on the Emacs load path, and adding that single line
instead:

  #+BEGIN_SRC elisp
    (load-library "trello-helper")
  #+END_SRC

It is also a good idea to bind function *trello-helper-to-clipboard* to
some key.  For one, I added this other line to my =~/.emacs= file:

  #+BEGIN_SRC elisp
    (define-key org-mode-map "\C-com" 'trello-helper-to-clipboard)
  #+END_SRC

If the *trello-helper* script is not on the program search path used by
Emacs, one may have to explicit it with a line like this one:

  #+BEGIN_SRC elisp
    (setq trello-helper-command "/SOME/PATH/TO/trello-helper")
  #+END_SRC

** Usage

To create an index file in Org format reaching all you Trello boards,
do something like this in a shell:

  #+BEGIN_SRC sh
    trello-helper > Boards.org
  #+END_SRC

To initialize an Org format copy of a Trello board named =BOARD NAME=,
do a command like this in a shell:

  #+BEGIN_SRC sh
    trello-helper 'BOARD NAME' > Board_Name.org
  #+END_SRC

When visiting such an Org format file within Emacs, you'll find links
that you may click on (or use *C-c C-o* if you prefer), with the effect
of getting your Web browser to display the corresponding Trello card.
Also, to copy and paste some Org text from Emacs into Trello, first
select the region to copy, then use *M-x trello-helper-to-clipboard* or
*C-c o m* (or whatever keybinding you put aside for that command), and
only then paste the content at the appropriate place within a Trello
card in your browser.  By doing it this way, the Org markup gets
rewritten so it displays more correctly within Trello pages.

The *trello-helper* script accepts these options:

  - -d :: This option triggers debugging.  Once the program has
          established itself as a Trello client, it triggers an
          IPython interactive session, with *self* initialized as the
          /Main/ instance.

  - -i :: This option forces the inclusion of closed boards, lists and
          cards in the produced Org file, as these are normally
          excluded.  When this option is used, indicators like =TODO= or
          =DONE= are added respectively for opened and closed elements.

  - -m :: This option reads some Org text from standard input, does a
          half-hearted transcription of its inline markup to Markdown,
          then loads the result into the system clipboard.  This helps
          the *trello-helper-to-clipboard* function in =trello-helper.el=.

** Random notes

- Markdown to Org markup and back is approximative, it uses heuristics
  to address a few common cases.  As Org markup is rather constrained
  anyway, I do not think it is possible to really solve this problem.

- To ease file inter-operability a tiny bit, and favor some later
  collaboration with Antoine, properties are named as in *org-trello*.

- The tool is currently unable to merge recent changes which occurred
  on the Trello side since last copy.  Merging would allow for
  local-only annotations in the Org files.  In view of such mechanics,
  the produced Org files already convey internal Trello ids.

** History

This is a rewrite of an old unpublished tool of mine, named
*fetch-trello*.  It was using the Trello API to fetch all available
Trello boards at once and turn them into a single Org format file,
also providing diffs with the previous such Org file.  The tool was
less useful than I expected: the result was a bit bulky, diffs were
requiring too much scrutiny, and at the time, the Trello site was a
bit flaky.

Later, Antoine published *org-trello*, which is enthusiasming in many
ways, especially for me by showing it is much more natural to use one
Org file per Trello board, quite clever to use Trello ids to automate
the merging of differences, useful to set a 2-way link rather than my
pull-only.  Yet, *org-trello* does not fulfill all my needs.  One one
hand, I'd like a different structuring in Org for Trello data, the
capability of adding my own local-only comments with no danger of
losing them later, and automated transcription between Markdown and
Org markup.  On the other hand, I'd like something technically easier:
Emacs Lisp is too heavy in many ways, *org-trello* depends on many
packages (among which a precise version of Org which is older than the
version I use — a weakness in the Emacs packaging system?), and uses
asynchronous updates (distracting and difficult to rightly implement).
